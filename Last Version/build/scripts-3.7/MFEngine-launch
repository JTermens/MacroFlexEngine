#!/opt/anaconda3/envs/PPI-prediction-project-2/bin/python
import argparse
import os

from Bio.PDB import MMCIFIO, PDBIO
import MacroFlexEngine.lib.exclude_water as excl
from MacroFlexEngine.engine import MacroFlexEngine
from MacroFlexEngine.lib.utils import make_profile, show_profile
from MacroFlexEngine.Modeller.FlexEngineModeller import FlexEngineModeller
import MacroFlexEngine.lib.utils as utils

def model_fasta(fasta_folder, pdb_folder):
    """ Main function to start processing fasta files from the given folder, and outputting them on the give output folder
    Arguments:
       - fasta_folder - the folder containing all the fasta files
       - pdb_folder - the output folder
    """
    fasta_files = utils.get_files(input_path=fasta_folder, allowed_formats={"fasta", "FASTA", "fa", "pir"})
    if not fasta_files:
        raise FileNotFoundError(f"Folder {fasta_folder} not found or no fasta files found in it")

    for fasta_file in fasta_files:
        builder = FlexEngineModeller(fasta_file)
        builder.beginProcess()

    confirm_selection = False
    while confirm_selection == False:
        selected_pdb = input('Please, select the best model to build the complex: ')

        make_profile(selected_pdb, ".")
        show_profile(selected_pdb + ".profile")

        confirmation = input(f"Do you confirm the {selected_pdb} file (y/n): ")
        if confirmation == 'y':
            confirm_selection = True

    os.system(f"cp {selected_pdb} {pdb_folder}")
    print(f"Selection confirmed, pdb added to {pdb_folder}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="This program provides a Complex Builder for a given interaction files")

    # Mandatory arguments
    parser.add_argument('-i', '--input',
                        dest="input",
                        action="store",
                        required=True,
                        help="The input folder containing the complexes files")
    parser.add_argument('-o', '--output',
                        dest="output",
                        action="store",
                        default="./final_complex",
                        help="The output file containing the final complex")
    parser.add_argument('-v', '--verbose',
                        dest="verbose",
                        action="store",
                        default=False,
                        help="More detailed process information")
    parser.add_argument("-p", "--profile",
                        dest="show_profile",
                        action="store",
                        default=False,
                        help="Show the energy profile of the output model")
    parser.add_argument("-f", "--fasta",
                        dest="fasta",
                        action="store",
                        required=False,
                        help="FASTA folder for uncompleted models")

    options = parser.parse_args()
    if not os.path.isdir(os.path.abspath(options.input)) or not os.path.isdir(os.path.abspath(options.output)):
        raise IOError("The input is not a folder")

    if(options.fasta):
        try:
            model_fasta(options.fasta, options.input)
        except KeyboardInterrupt:
            print("Modeling interrupted by the user...")

    engine = MacroFlexEngine(options.verbose)
    structure = None

    try:
        structure = engine.construct_engine(options.input)

    except KeyboardInterrupt:
        print("Creation of complex interrupted by the user...")

    if len(structure[0]) > 52:
        io = MMCIFIO()
        file_format = ".cif"
    else:
        io = PDBIO()
        file_format = ".pdb"

    io.set_structure(structure)
    io.save(file=options.output + file_format, select=excl.ExcludeWaterSelect())

    if options.show_profile:
        make_profile(options.output + file_format,options.output)
        show_profile(options.output + ".profile")


