#!/usr/bin/env python3
import argparse
import os

from Bio.PDB import MMCIFIO, PDBIO
from MacroFlexEngine.lib.utils import make_profile, show_profile

import MacroFlexEngine.lib.exclude_water as excl
from MacroFlexEngine.engine import MacroFlexEngine
import MacroFlexEngine.Modeller.FlexEngineModeller as model 

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="This program provides a Complex Builder for a given interaction files")

    # Mandatory arguments
    parser.add_argument('-i', '--input',
                        dest="input",
                        action="store",
                        required=True,
                        help="The input folder containing the complexes files")
    parser.add_argument('-o', '--output',
                        dest="output",
                        action="store",
                        default="./final_complex",
                        help="The output file containing the final complex")
    parser.add_argument('-v', '--verbose',
                        dest="verbose",
                        action="store",
                        default=False,
                        help="More detailed process information")
    parser.add_argument("-p", "--profile",
                        dest="show_profile",
                        action="store",
                        default=False,
                        help="Show the energy profile of the output model")
    parser.add_argument("-s", "--seq",
                        dest="sequence",
                        action="store",
                        required=False,
                        help="sequence folder for uncompleted models, sequences must be in .pir format")

    options = parser.parse_args()
    if not os.path.isdir(os.path.abspath(options.input)):
        raise IOError("The input is not a folder")
    if os.path.isdir(os.path.abspath(options.output)):
        raise IOError("The output is not a file")

    if(options.sequence):
        try:
            model.model_sequence(options.sequence, options.input)

        except KeyboardInterrupt:
            print("Modeling interrupted by the user...")

    engine = MacroFlexEngine(options.verbose)
    structure = None

    try:
        structure = engine.construct_engine(options.input)

    except KeyboardInterrupt:
        print("Creation of complex interrupted by the user...")

    if len(structure[0]) > 52:
        io = MMCIFIO()
        file_format = ".cif"
    else:
        io = PDBIO()
        file_format = ".pdb"

    io.set_structure(structure)
    io.save(file=options.output + file_format, select=excl.ExcludeWaterSelect())

    if options.show_profile:
        make_profile(options.output + file_format,options.output)
        show_profile(options.output + ".profile")
